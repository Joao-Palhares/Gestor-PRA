/*
Deployment script for GestorDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GestorDB"
:setvar DefaultFilePrefix "GestorDB"
:setvar DefaultDataPath "C:\Users\jonip\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\jonip\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[tblPrh].[progresso] on table [dbo].[tblPrh] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column estado on table [dbo].[tblPrh] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[tblPrh])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [dbo].[tblUsers]...';


GO
ALTER TABLE [dbo].[tblUsers] DROP CONSTRAINT [DF__tmp_ms_xx__is_lo__17036CC0];


GO
PRINT N'Dropping unnamed constraint on [dbo].[tblUsers]...';


GO
ALTER TABLE [dbo].[tblUsers] DROP CONSTRAINT [DF__tmp_ms_xx__nr_at__17F790F9];


GO
PRINT N'Dropping [dbo].[FK_tblAlunos_tblUsers]...';


GO
ALTER TABLE [dbo].[tblAlunos] DROP CONSTRAINT [FK_tblAlunos_tblUsers];


GO
PRINT N'Altering [dbo].[tblPrh]...';


GO
ALTER TABLE [dbo].[tblPrh] ALTER COLUMN [estado] VARCHAR (50) NOT NULL;


GO
ALTER TABLE [dbo].[tblPrh]
    ADD [progresso] VARCHAR (100) NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[tblUsers]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblUsers] (
    [id_user]          INT           IDENTITY (1, 1) NOT NULL,
    [username]         VARCHAR (50)  NOT NULL,
    [password]         CHAR (64)     NOT NULL,
    [role]             CHAR (2)      NOT NULL,
    [is_locked]        BIT           DEFAULT ((0)) NULL,
    [nr_attempts]      INT           DEFAULT ((0)) NULL,
    [locked_date_time] DATETIME      NULL,
    [email]            VARCHAR (256) NOT NULL,
    [EmailConfirmed]   BIT           NULL,
    [isfirstlogin]     BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([id_user] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UK_tblUsers_username1] UNIQUE NONCLUSTERED ([username] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblUsers])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblUsers] ON;
        INSERT INTO [dbo].[tmp_ms_xx_tblUsers] ([id_user], [username], [password], [role], [is_locked], [nr_attempts], [locked_date_time], [email], [isfirstlogin])
        SELECT   [id_user],
                 [username],
                 [password],
                 [role],
                 [is_locked],
                 [nr_attempts],
                 [locked_date_time],
                 [email],
                 [isfirstlogin]
        FROM     [dbo].[tblUsers]
        ORDER BY [id_user] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblUsers] OFF;
    END

DROP TABLE [dbo].[tblUsers];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblUsers]', N'tblUsers';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UK_tblUsers_username1]', N'UK_tblUsers_username', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_tblAlunos_tblUsers]...';


GO
ALTER TABLE [dbo].[tblAlunos] WITH NOCHECK
    ADD CONSTRAINT [FK_tblAlunos_tblUsers] FOREIGN KEY ([id_user]) REFERENCES [dbo].[tblUsers] ([id_user]);


GO
PRINT N'Altering [dbo].[sp_GetPrhsByAluno]...';


GO
ALTER PROCEDURE [dbo].[sp_GetPrhsByAluno]
@id_aluno int
AS
BEGIN
	SELECT tblPrh.id_prh ,tblAlunos.id_aluno,tblAlunos.nome_aluno,tblTurmas.id_turma ,tblTurmas.nome_turma,tblProfessores.id_professor ,tblProfessores.nome_professor , tblDT.id_dt ,tblDT.nome_dt, tblPrh.estado, tblPrh.progresso
FROM tblPrh
INNER JOIN tblAlunos ON tblPrh.id_aluno = tblAlunos.id_aluno 
INNER JOIN tblProfessores ON tblPrh.id_professor = tblProfessores.id_professor
INNER JOIN tblTurmas ON tblPrh.id_turma = tblTurmas.id_turma 
INNER JOIN tblDT ON tblPrh.id_dt = tblDT.id_dt where tblPrh.id_aluno=@id_aluno
END
GO
PRINT N'Altering [dbo].[sp_GetPrhsByDT]...';


GO
ALTER PROCEDURE [dbo].[sp_GetPrhsByDT]
@id_dt int
AS
BEGIN
	SELECT tblPrh.id_prh ,tblAlunos.id_aluno,tblAlunos.nome_aluno,tblTurmas.id_turma ,tblTurmas.nome_turma,tblProfessores.id_professor ,tblProfessores.nome_professor , tblDT.id_dt ,tblDT.nome_dt, tblPrh.estado,tblPrh.progresso
FROM tblPrh
INNER JOIN tblAlunos ON tblPrh.id_aluno = tblAlunos.id_aluno
INNER JOIN tblProfessores ON tblPrh.id_professor = tblProfessores.id_professor
INNER JOIN tblTurmas ON tblPrh.id_turma = tblTurmas.id_turma 
INNER JOIN tblDT ON tblPrh.id_dt = tblDT.id_dt where tblPrh.id_dt=@id_dt
END
GO
PRINT N'Altering [dbo].[sp_GetPrhsByProfessor]...';


GO
ALTER PROCEDURE [dbo].[sp_GetPrhsByProfessor]
@id_professor int
AS
BEGIN
	SELECT tblPrh.id_prh ,tblAlunos.id_aluno,tblAlunos.nome_aluno,tblTurmas.id_turma ,tblTurmas.nome_turma,tblProfessores.id_professor ,tblProfessores.nome_professor , tblDT.id_dt ,tblDT.nome_dt, tblPrh.estado,tblPrh.progresso
FROM tblPrh
INNER JOIN tblAlunos ON tblPrh.id_aluno = tblAlunos.id_aluno 
INNER JOIN tblProfessores ON tblPrh.id_professor = tblProfessores.id_professor
INNER JOIN tblTurmas ON tblPrh.id_turma = tblTurmas.id_turma 
INNER JOIN tblDT ON tblPrh.id_dt = tblDT.id_dt where tblPrh.id_professor=@id_professor
END
GO
PRINT N'Altering [dbo].[sp_InsertPrh]...';


GO
ALTER PROCEDURE [dbo].[sp_InsertPrh]
	@id_principal int,
	@codigo_prh varchar(70),
	@id_professor int,
	@id_aluno int,
	@id_turma int,
	@id_dt int,
	@estado varchar(50),
	@progresso varchar(100)


AS
Begin
	Declare @count int
	SELECT @count= COUNT(id_prh) FROM tblPrh

	IF(@count<>0)
	begin 
		select -1 as ReturnCode
	End
	Begin
		Insert INTO [dbo].[tblPrh]
				([id_principal],
				[codigo_prh],
				[id_professor],
				[id_aluno],
				[id_turma],
				[id_dt],
				[estado])
		Values (@id_principal,@codigo_prh,@id_professor,@id_aluno,@id_turma,@id_dt,@estado,@progresso)
		select 1 as ReturnCode
	END
END
GO
PRINT N'Altering [dbo].[sp_UpdatePrhByID]...';


GO
ALTER PROCEDURE [dbo].[sp_UpdatePrhByID]
	@id_prh int,
	@id_principal int,
	@id_descricao_atividade int,
	@codigo_prh char(70),
	@id_professor int,
	@id_aluno int,
	@id_turma int,
	@id_dt int,
	@id_avaliaçoes int,
	@estado varchar(50),
	@progresso varchar(100)
AS
begin
	declare @count int 
	SELECT @count = COUNT (*) from tblPrh
	where id_prh=@id_prh

	if(@count=0)
		begin
			select -1 as ReturnCode100
		End
	Else
	Begin
		update tblPrh 
		set id_principal=@id_principal,id_descricao_atividade=@id_descricao_atividade,id_avaliaçoes=@id_avaliaçoes,codigo_prh=@codigo_prh,id_professor=@id_professor,id_aluno=@id_aluno,id_turma=@id_turma,id_dt=@id_dt,estado=@estado, progresso=@progresso
		where id_prh=@id_prh
		select 1 as ReturnCode10
	END
END
GO
PRINT N'Creating [dbo].[sp_InsertEmailVerification]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertEmailVerification]
	@email VARCHAR(256)
AS
BEGIN
	DECLARE @guid UNIQUEIDENTIFIER, @id_pwdRecoveryRequest int
	
	SET @guid = NEWID()

	SELECT @id_pwdRecoveryRequest = id_pwdRecoveryRequest FROM tblNewPwdRequests WHERE email = @email
	
	IF(@@ROWCOUNT <> 0)
	BEGIN
		UPDATE tblNewPwdRequests SET guid = @guid, email = @email, date_recovery_request = GETDATE() WHERE id_pwdRecoveryRequest = @id_pwdRecoveryRequest
	END
	ELSE
	BEGIN
		INSERT INTO tblNewPwdRequests VALUES (@guid, @email, GETDATE())	
	END

	SELECT @guid AS GUID
END
GO
PRINT N'Refreshing [dbo].[sp_GetPrhByCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_GetPrhByCode]';


GO
PRINT N'Refreshing [dbo].[sp_GetPrhByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_GetPrhByID]';


GO
PRINT N'Refreshing [dbo].[sp_GetPrhEstadoByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_GetPrhEstadoByID]';


GO
PRINT N'Refreshing [dbo].[sp_AuthenticateUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_AuthenticateUser]';


GO
PRINT N'Refreshing [dbo].[sp_DeleteUserByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_DeleteUserByID]';


GO
PRINT N'Refreshing [dbo].[sp_GetUserByEmail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_GetUserByEmail]';


GO
PRINT N'Refreshing [dbo].[sp_GetUserByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_GetUserByID]';


GO
PRINT N'Refreshing [dbo].[sp_GetUserByUsername]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_GetUserByUsername]';


GO
PRINT N'Refreshing [dbo].[sp_GetUsers]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_GetUsers]';


GO
PRINT N'Refreshing [dbo].[sp_InsertUserAdmin]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_InsertUserAdmin]';


GO
PRINT N'Refreshing [dbo].[sp_InsertUserAluno]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_InsertUserAluno]';


GO
PRINT N'Refreshing [dbo].[sp_InsertUserProfessor]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_InsertUserProfessor]';


GO
PRINT N'Refreshing [dbo].[sp_ResetPassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_ResetPassword]';


GO
PRINT N'Refreshing [dbo].[sp_UpdateUserByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_UpdateUserByID]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[tblAlunos] WITH CHECK CHECK CONSTRAINT [FK_tblAlunos_tblUsers];


GO
PRINT N'Update complete.';


GO
